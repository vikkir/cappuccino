#!/usr/bin/env objj

require("narwhal").ensureEngine("rhino");

@import <Foundation/Foundation.j>
@import <AppKit/AppKit.j>

@import "../press/objj-analysis-tools.j"

var FILE = require("file");

var stream = require("term").stream;
var parser = new (require("args").Parser)();

parser.usage("INPUT_PROJECT OUTPUT_PROJECT");
parser.help("Combine a Cappuccino application into a single JavaScript file.");

parser.helpful();

function main(args)
{
    var options = parser.parse(args);

    if (options.args.length < 2) {
        parser.printUsage(options);
        return;
    }

    var rootPath = FILE.path(options.args[0]).join("").absolute();
    var outputPath = FILE.path(options.args[1]).join("").absolute();

    var flattener = new ObjectiveJFlattener(rootPath);

    flattener.setIncludePaths([rootPath.join("Frameworks/Debug")]);
    flattener.setEnvironments(["Browser", "ObjJ"]);

    flattener.load(rootPath.join("main.j"));
    flattener.finishLoading();

    var root = flattener.require("objective-j").StaticResource.root;

    var components = rootPath.split("/").slice(1, -1);
    print(components)
    var node = root;
    while (components.length) {
        print(node._path);
        node = node._children[components.shift()];
    }
    applicationRoot = node;
    print("applicationRoot._children="+Object.keys(applicationRoot._children));

    print("rootPath="+rootPath);
    print("applicationRoot="+applicationRoot.toString());
    print("root="+root);

    var applicationJS = flattener.buildApplicationJS(applicationRoot);

    FILE.copyTree(rootPath, outputPath);

    outputPath.join("Application.js").write(applicationJS);

    addApplicationScriptTag(outputPath.join("index.html"));
    addApplicationScriptTag(outputPath.join("index-debug.html"));
}

// ObjectiveJFlattener inherits from ObjectiveJRuntimeAnalyzer
function ObjectiveJFlattener(rootPath) {
    ObjectiveJRuntimeAnalyzer.apply(this, arguments);

    this.resourceBuffer = [];
    this.bundleBuffer = [];

    this._outputBundles = {};
}

ObjectiveJFlattener.prototype = Object.create(ObjectiveJRuntimeAnalyzer.prototype);

ObjectiveJFlattener.prototype.buildApplicationJS = function(applicationRoot) {
    print(applicationRoot);

    this.serializeStaticResources(applicationRoot);

    var buffer = []

    buffer.push("(function(){");

    buffer.push(this.bundleBuffer.join("\n"));

    buffer.push("var nodeStack = [];");
    buffer.push("var applicationRoot = ObjectiveJ.StaticResource.root.nodeAtSubPath(ObjectiveJ.StaticResource.cwd, YES);");
    buffer.push("var currentNode = null;");
    buffer.push("var newNode;");

    buffer.push(this.resourceBuffer.join("\n"));

    buffer.push("console.log(ObjectiveJ.StaticResource.root);");
    buffer.push("console.log(applicationRoot);");
    buffer.push("})();");

    return buffer.join("\n");
}

ObjectiveJFlattener.prototype.serializeStaticResources = function(node, depth) {
    depth = depth || 0;

    //print(Array(depth+1).join(" ") + node);

    var bundle = this.context.global.CFBundle.bundleContainingPath(node.path());
    if (!bundle) {
        stream.print("\0yellow(Warning:\0) No bundle for path: \0cyan("+node.path()+"\0)");
    }
    else if (!this._outputBundles[bundle.path()]) {
        this._outputBundles[bundle.path()] = bundle;
        stream.print("Writing bundle: \0cyan("+bundle.path()+"\0)");
        print(bundle.infoDictionary())

        this.bundleBuffer.push("var bundle = new CFBundle("+JSON.stringify(this.rootPath.relative(bundle.path()).toString())+");");
        this.bundleBuffer.push("bundle._loadStatus = " + (1<<4) + ";");
        if (bundle.infoDictionary()) {
            this.bundleBuffer.push("bundle._infoDictionary = CFPropertyList.propertyListFromString(" +
                JSON.stringify(CPPropertyListCreateData(bundle.infoDictionary()).rawString()) + ");");
        }
    }

    // not the root node:
    if (depth > 0) {
        this.resourceBuffer.push("newNode = new ObjectiveJ.StaticResource(" +
            JSON.stringify(node.name()) +
            ", currentNode, " +
            JSON.stringify(node.isDirectory()) + ", " +
            JSON.stringify(node.isResolved()) + ");");
    } else {
        this.resourceBuffer.push("newNode = applicationRoot;");
    }

    if (node.contents())
        this.resourceBuffer.push("newNode._contents = " + JSON.stringify(node.contents()) + ";");

    if (!node.children())
        return;

    this.resourceBuffer.push("nodeStack.push(currentNode);");
    this.resourceBuffer.push("currentNode = newNode;");

    var children = node.children();
    for (var name in children) {
        this.serializeStaticResources(children[name], depth+1);
    }

    this.resourceBuffer.push("currentNode = nodeStack.pop();");
}

function addApplicationScriptTag(indexHTMLPath) {
    var indexHTML = indexHTMLPath.read();

    // attempt to append the Application.js script tag after
    var newIndexHTML = indexHTML.replace(/([ \t]+)<script[^>]+Objective-J.js[^>]+>(?:\s*<\/script>)?/,
        '$&\n$1<script src = "Application.js" type = "text/javascript"></script>');

    if (newIndexHTML === indexHTML) {
        print("Unable to automatically add Application.js script tag.");
    }

    indexHTMLPath.write(newIndexHTML);
}
